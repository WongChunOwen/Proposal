---
title: "Team Project Proposal"
format: html
editor: visual
authors: [WONG CHUN OWEN, 
          ONG JU EN NIGEL,
          SHERWYN CHAN YIN KIT,
          ASHSYAHID BIN HUSSIN,
          LIM XUAN YU]
description: "Visualising the climate change over time"
---

For this document, the following packages are required:

```{r, message = FALSE, warning = FALSE}
library(tidyverse)
```

# Original Data Visualization in Climate Change

```{r}
library(dplyr)
library(plotly)



df <- read.csv("graph.csv")



p <- plot_geo(df, locationmode = 'world') |>
  add_trace(    z = ~df$new_cases_per_million, locations = df$code, frame=~df$start_of_week,
                color = ~df$new_cases_per_million)

p

```

```{r, message = FALSE, warning = FALSE}
library(knitr)
library(zoo)

# Load the data
data <- read_csv("country_temp.csv")

# Convert the date column to Date format and extract the year and month
data$dt <- as.Date(data$dt, format = "%Y-%m-%d")
data$year <- as.numeric(format(data$dt, "%Y"))
data$month <- format(data$dt, "%m")

# Group by country, year, and month, then calculate the average temperatures rounded to 2 decimal points
monthly_avg_all_countries_initial <- data |>
  group_by(Country, year, month) |>
  summarize(monthly_avg = round(mean(AverageTemperature, na.rm = TRUE), 2))

# Display the tail of the initial data frame
knitr::kable(tail(monthly_avg_all_countries_initial), caption = "Tail of Monthly Average Temperatures by Country", digits = 2)

# Filter the data for Afghanistan in the year 1839
afghanistan_1839_initial <- monthly_avg_all_countries_initial |>
  filter(Country == "Afghanistan" & year == 1839)

# Display the filtered data
print(afghanistan_1839_initial)

# Check for NA and NaN values in the monthly_avg_all_countries_initial dataframe
nan_check_initial <- sapply(monthly_avg_all_countries_initial, function(x) sum(is.na(x)))
print(nan_check_initial)

# Display rows with NA and NaN values
rows_with_nan_initial <- monthly_avg_all_countries_initial[apply(monthly_avg_all_countries_initial, 1, function(row) any(is.na(row))), ]
print(rows_with_nan_initial)

# Function to fill NaN values
fill_nan <- function(df) {
  df |>
    group_by(Country) |>
    mutate(monthly_avg = na.approx(monthly_avg, na.rm = FALSE, rule = 2)) |>
    mutate(monthly_avg = ifelse(is.na(monthly_avg), zoo::na.locf(monthly_avg, na.rm = FALSE), monthly_avg)) |>
    mutate(monthly_avg = ifelse(is.na(monthly_avg), zoo::na.locf(monthly_avg, fromLast = TRUE, na.rm = FALSE), monthly_avg)) |>
    ungroup()
}

# Apply fill_nan function
monthly_avg_all_countries_filled <- fill_nan(monthly_avg_all_countries_initial)

# Function to fill remaining NaN values with median of 5-year window for the same month
fill_with_window_month_median <- function(df) {
  df |>
    group_by(Country, month) |>
    mutate(monthly_avg = ifelse(is.na(monthly_avg), 
                                sapply(seq_along(monthly_avg), function(i) {
                                  if (is.na(monthly_avg[i])) {
                                    start_year <- year[i] - 5
                                    end_year <- year[i] + 5
                                    window_median <- median(df$monthly_avg[df$Country == Country[i] & 
                                                                          df$month == month[i] &
                                                                          df$year >= start_year & 
                                                                          df$year <= end_year & 
                                                                          !is.na(df$monthly_avg)], 
                                                          na.rm = TRUE)
                                    return(window_median)
                                  } else {
                                    return(monthly_avg[i])
                                  }
                                }), 
                                monthly_avg)) |>
    ungroup()
}

# Apply window month median filling function
monthly_avg_all_countries_median <- fill_with_window_month_median(monthly_avg_all_countries_filled)

# Round the final dataframe to 2 decimal places
monthly_avg_all_countries_median <- monthly_avg_all_countries_median |>
  mutate(monthly_avg = round(monthly_avg, 2))

# Check for remaining NaN values in the median imputed dataset
nan_check_median <- sapply(monthly_avg_all_countries_median, function(x) sum(is.na(x)))
print(nan_check_median)

# Display rows with NaN values in the median imputed dataset
rows_with_nan_median <- monthly_avg_all_countries_median[apply(monthly_avg_all_countries_median, 1, function(row) any(is.na(row))), ]
print(rows_with_nan_median)

# Filter the data for Afghanistan in the year 1839
afghanistan_1839_median <- monthly_avg_all_countries_median |>
  filter(Country == "Afghanistan" & year == 1839)

# Display the filtered data
print(afghanistan_1839_median)

```

# Critical Assessment of the Original Visualization

# Proposed Improvements

## Choropleth Map Integration

# Data Cleaning

## Pivoting (if any)

## Joining

## Convert Year

# Conclusion

###### References

[To improve on](https://www.ncei.noaa.gov/access/monitoring/monthly-report/global/202313)

[Country Codes](https://www.iban.com/country-codes)

[Ideas](https://climate.nasa.gov/vital-signs/global-temperature/?intent=121)
